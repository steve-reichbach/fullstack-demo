import React from 'react';
import { autoGeneratedFields } from '../../helpers/constants'

import { dbFormatDate } from '../../helpers/lib';
import { validationHook } from './validation'

import { Formik, Form, Field, ErrorMessage } from 'formik';
import Button from '@material-ui/core/Button';
import {
    setMode,
    addRecord
} from '../../redux/actions';
import { connect } from "react-redux";
import { apiCreateRecord } from '../../api';

class AddRecordForm extends React.Component {
    constructor(props) {
        super(props);
        this.handleSubmit = this.handleSubmit.bind(this);
    }
    handleSubmit = value => {
        delete value.id;
        if (value['date_created']) {
            value['date_created'] = dbFormatDate(new Date());
        }
        if (value['last_modified']) {
            value['last_modified'] = dbFormatDate(new Date());
        }
        this.props.onAddRecord(value, this.props.collection);
    };
    render() {
        const model = this.props.model;
        return (
            <div>
                <Formik
                    enableReinitialize={true}
                    initialValues={model}
                    validate={validationHook[model]}
                    onSubmit={(values, {setSubmitting}) => {
                        this.handleSubmit(values, setSubmitting);
                    }}
                >
                    {({isSubmitting}) => (
                        <Form>
                            {
                                Object.entries(model).map(row => {
                                    const name = row[0];
                                    const value = row[1];

                                    if (autoGeneratedFields.includes(name)) {
                                        return null
                                    }
                                    return <div key={`${name}-${value}`} className='formItem'>
                                        <label htmlFor={name}>{name}</label>
                                        <Field name={name} />
                                        <ErrorMessage name={name} component="div"/>
                                    </div>;
                                    }
                                )
                            }
                            <br/>
                            <Button
                                type="submit"
                                variant="contained"
                                size="small"
                                color="primary">
                                Submit
                            </Button>
                        </Form>
                    )}
                </Formik>
            </div>);
    }
}

const mapStateToProps = state => ({
    model: state.records.current,
    collection: state.collection,
    mode: state.mode
});

const mapDispatchToProps = dispatch => ({
    onAddRecord: (record, collection) => {
        apiCreateRecord(record, collection).then(data => {
            // Specifying `id` that we've just got from the backend
            record['id'] = data[0];
            return dispatch(addRecord(record, collection));
        });
        dispatch(setMode(''));
    },
    onHideForm: () => dispatch(setMode('')),
});

export default connect(mapStateToProps, mapDispatchToProps)(AddRecordForm)
