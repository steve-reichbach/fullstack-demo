import React, { Component } from 'react';
import { connect } from 'react-redux';
import { Formik, Form, Field } from 'formik';
import Button from '@material-ui/core/Button';
import TextField from '../CTextField/CTextField';
import {
    autoGeneratedFields,
    MODE_CREATING,
    MODE_EDITING
} from '../../helpers/constants'

import { dbFormatDate } from '../../helpers/lib';
import { validation } from './validation'

import {
    setMode,
    addRecord,
    updateRecord
} from '../../redux/actions';

import {apiCreateRecord, apiUpdateRecord} from '../../api';

class RecordForm extends Component {
    constructor(props) {
        super(props);
        this.handleSubmit = this.handleSubmit.bind(this);
        this.hideForm = this.hideForm.bind(this);
    }
    handleSubmit = value => {
        const {
            mode,
            model,
            collection,
            onHideForm,
            onAddRecord,
            onUpdateRecord,
        } = this.props;

        ['date_created', 'last_modified'].forEach(field => {
            if (value[field]) { value[field] = dbFormatDate(new Date()) }
        });

        if (mode === MODE_EDITING) {
            onUpdateRecord(model['id'], value, collection);
            onHideForm();
        } else {
            delete value.id; // We use first item from the table as a model, and we don't need its id
            onAddRecord(value, collection);
        }
    };
    hideForm = () => {
        this.props.onHideForm();
    };
    render() {
        const { model, collection, mode } = this.props;
        if (![MODE_CREATING, MODE_EDITING].includes(mode)) { return null }
        return (
            <section>
                <h2>{ mode === MODE_CREATING ? 'Adding new record to ' : 'Editing record from' } «{collection}»</h2>
                <Formik
                    enableReinitialize={true}
                    initialValues={model}
                    validationSchema={validation}
                    onSubmit={(values, {setSubmitting}) => this.handleSubmit(values, setSubmitting, mode)}
                >
                    {() => (
                        <Form>
                            {
                                Object.entries(model).map(row => {
                                    const name = row[0];

                                    if (autoGeneratedFields.includes(name)) {
                                        return null
                                    }
                                    return <div key={`${name}`} className='formItem'>
                                        <Field
                                            required
                                            name={name}
                                            label={name}
                                            component={TextField}
                                        />
                                    </div>;
                                    }
                                )
                            }
                            <br/>
                            <Button
                                type="submit"
                                variant="contained"
                                color="primary"
                                className='recordFormButton'>
                                Submit
                            </Button>
                            <Button
                                variant="contained"
                                color="primary"
                                className='recordFormButton'
                                onClick={this.hideForm}>
                                Cancel
                            </Button>
                        </Form>
                    )}
                </Formik>
            </section>)
    }
}

const mapStateToProps = state => ({
    model: state.records.current,
    collection: state.collection,
    mode: state.mode
});

const mapDispatchToProps = dispatch => ({
    onAddRecord: (record, collection) => {
        apiCreateRecord(record, collection).then(data => {
            // Specifying `id` that we've just got from the backend
            record['id'] = data[0];
            return dispatch(addRecord(record, collection));
        });
        dispatch(setMode(''));
    },
    onUpdateRecord: (id, record, collection) => {
        apiUpdateRecord(id, record, collection).then(dispatch(updateRecord(id, record)))

    },
    onHideForm: () => dispatch(setMode('')),
});

export default connect(mapStateToProps, mapDispatchToProps)(RecordForm)
